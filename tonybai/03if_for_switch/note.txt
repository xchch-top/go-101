## if语法

操作符号有严格的优先级, 为了降低引入问题的概率, 可以用小括号包裹, 提高可读性
在日常编码中要减少多分支结构, 甚至是二分支的使用, 这会有助于我们写出优雅、简洁、易读易维护且不易错的代码.
建议在使用if语句时, 尽量复合"快乐路径"原则, 这个原则通常只使用最容易理解的但分值结构, 所有正常代码均靠左, 这让函数内代码逻辑一目了然

## for语法

go中只有一种循环结构, 就是for语句

经典for循环语句有四个组成部分: 循环前置语句, 循环控制条件, 循环后置语句, 循环体
除了循环体部分, 其余的三个部分都是可选的.

for-range语句变种
① 不关心元素的值时, 可以省略代表元素值的变量v, 只声明代表下标值的变量i
② 不关心元素下标, 只关心元素值, 那么我们可以用空标识符替代下标值的变量i, 注意, 空标识符不能省略
③ 既不关系下标, 也不关心元素值, 可以简写为 for range items {}

常规for迭代得到的是字符串内容的字节, for range迭代得到的是字符串中unicode字符的码点值
对map进行循环操作, for range是唯一的方法, for经典循环形式是不支持对map类型变量进行循环控制的

goto是一种公认的, 难以驾驭的语法元素

for语句常见踩坑点
问题一: 循环变量的重用
问题二: 参与循环的是for-range表达式的副本
问题三: 遍历map中元素的随机性

for/c19_v2: for语句常见踩坑点

## switch语句

代码演示
switch/c20_v1: switch语句的执行流程

无论default分支出现在什么位置, 它都只会在所有case都没有匹配上的情况下才会被执行

switch语句的灵活性
switch语句各表达式的求值结果可以为各种类型值, 只要它的类型支持比较操作就可以了, 比如整形, bool类型, 字符串类型, 复数类型,
    元素类型类型都是可比较类型的数组类型, 甚至字段类型都是可比较类型的结构体类型
switch语句支持声明临时变量
case语句支持表达式列表
取消了默认执行下一个case代码逻辑的语义

type switch
switch关键字后面跟着的表达式为 x.(type), 这种表达式形式是switch语句专有的
x必须是一个接口类型的变量, 表达式求值结果是这个接口类型变量对应的动态类型
case后面接的不是普通意义上的表达式, 而是一个个具体的类型

通过x.(type), 处理可以获得变量x的动态类型信息之外, 也能获得其动态类型对应的值信息

如果switch使用了某个特定的接口类型, 那么case后面只能使用实现了接口类型的类型, 否则编译器会报错

代码演示
switch/c20_v2: type switch

跳不出循环的break
不带label的break语句中断执行并跳出的, 是同一函数内break语句所在的最内层的for, switch或select

代码演示
switch/c20_v3: 跳不出循环的break