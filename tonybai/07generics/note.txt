## 泛型

泛型编程的中心思想是对具体的, 高效的算法进行抽象, 以获得通用的算法, 然后这些算法可以以不同的数据标识法结合起来, 产生各种各样有用的软件
说白了就是将算法与类型解耦, 实现算法更广泛的复用

返回切片中值最大的元素
代码演示 c39_v1
通过性能基准测试可以看出, 与maxAny相比, 泛型版本的maxGenerics性能要好很多, 但与原生版函数还有差距

go泛型方案的是指是对类型参数的支持包括
泛型函数: 带有类型参数的函数
泛型类型: 带有类型参数的自定义类型
泛型方法: 泛型类型的方法

泛型函数实例化在编译阶段完成, 不会对运行性能产生影响
泛型函数实例化过程
1. 工厂接单: 调用 maxGenerics([]int{…},工厂师傅发现要比较大小的对象类型为int
2. 模具检查与匹配:检查int类型是否满足模具的约束要求, 即int是否满足ordered约束, 如满足则将其作为类型实参替换maxGenerics函数中的类型形参T, 结果为maxGenerics[int]
3. 生产机器: 将泛型函数maxGenerics实例化为一个新函数, 其函数原型为 func([]int)int

泛型类型
代码演示 c39_v2

类型嵌入是运用go组合设计哲学的一个重要手段, 引入泛型类型之后, 我们仍然可以在泛型类型定义中嵌入普通类型
代码演示 c39_v3

go泛型目前的设计中, 泛型方法自身不可以再支持类型参数