## API风格：如何设计restful API?

REST代表的是表现层状态转移。REST是一种软件架构风格，是一组架构约束条件和原则。
REST规范把所内容都视为资源，也就是网络上一切皆资源。
REST架构对资源的操作包括获取，创建，修改和删除，这些操作正好对应http协议提供的GET，POST，PUT，DELETE方法
http动词与REST风格CRUD对应关系 https://static001.geekbang.org/resource/image/40/92/409164157ce4cde3131f0236d660e092.png

REST是一种规范，restful API是满足这种规范的API接口

restful api的设计原则包含7个方面，分别是 URI设计，资源操作映射，统一的返回格式，API版本管理，统一分页/过滤/排序/搜索功能

URI设计：资源都是URI标识的
1. 资源名使用名词而不是动词，并且用名词复数表示。资源分为Collection和Member，例如：http://www.example.com/users/zhang3
2. URI结尾不应包含/
3. 避免层级过审的URI，超过2层的资源嵌套会很乱，建议将其它资源转换为?参数，例如 /students?school=s&class=c

github rest接口定义 https://docs.github.com/en/rest

REST资源操作映射为HTTP方法
https://static001.geekbang.org/resource/image/d9/2d/d970bcd53d2827b7f2096e639d5fa82d.png
对资源操作应该满足安全性和幂等性 https://static001.geekbang.org/resource/image/b7/e1/b746421291654e4d2e51509b885c4ee1.png
get返回的结果，要尽量可用于PUT，POST操作中，这要求GET，PUT，POST操作的资源属性是一致的。
delete请求删除多个 DELETE /users?ids=1,2,3

统一的返回格式

API版本管理：通常版本标识可以放在3个位置 ①URL中 ②HTTP header中 ③Form表单中
github，etcd，kubernetes都是采用将版本标识放到url中的方式，例如：/v1/users

统一分页/过滤/排序/搜索功能
分页：在列出一个collection下所有的member时，应该提供分页功能。例如：/users?offset=0&limit=20
过滤：如果用户不需要一个资源的全部属性，可以在url参数里指定返回哪些属性。例如：/users?fields=email,username,address
排序：列出一个collection的前100个member。例如：/users?sort=age,asc
搜索：当一个资源member很多事，用户可能想通过搜索，快速找到所需要的member。

## API风格：RPC API介绍

restful和gRPC对比 https://static001.geekbang.org/resource/image/e6/ab/e6ae61fc4b0fc821f94d257239f332ab.png
grpc接口转rest接口的插件 https://github.com/grpc-ecosystem/grpc-gateway

## 项目管理：如何编写高质量的Makefile？

如何编写一个高质量的Makefile？
1. 打好基础，熟练掌握makefile命令
2. 做好准备工作，提前规划好Makefile要实现的功能
3. 进行规划，设计一个合理的Makefile结构
4. 掌握方法，用好Makefile的编写技巧

makefile命令 https://github.com/seisman/how-to-write-makefile

go项目的Makefile应该实现以下功能：格式化代码，静态代码检查，单元测试，代码构建，文件清理，帮助，docker镜像打包
采用分层的设计方法，根目录下的makefile聚合所有的makefile命令，具体实现则按功能分类，放在另外的makefile中。

掌握makefile编写技巧 xxx

## 代码检查：如何进行静态代码检查？

静态代码检查工具 golangci-lint
工具安装 go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
查看golangci-lint使用的配置文件 golangci-lint config path
查看golangci-lint支持的linter插件 golangci-lint linters
golangci-lint run支持很多命令行选项，可通过golangci-lint run -h查看
    这里列出一些重要的选项 https://static001.geekbang.org/resource/image/ac/fa/ac6098cf64cde7b8326cfd3508b04dfa.jpg

可以通过golangci-lint配置文件进行配置，默认的配置文件名为.golangci.yaml，可以通过-c选项指定配置文件。
golangci-lint配置文件文档 https://golangci-lint.run/usage/configuration/
iam的golangci-lint配置文件 https://github.com/marmotedu/iam/blob/master/.golangci.yaml

如何使用golangci-lint进行静态代码检查
对当前目录及子目录下的所有go文件进行静态代码检查：golangci-lint run，等效于golangci-lint run ./...

## 如何生成swagger文档

swagger编辑器 https://editor.swagger.io/
openapi语法 https://swagger.io/specification/
go-swagger工具安装 go install github.com/go-swagger/go-swagger/cmd/swagger@latest

openapi是一个api规范，它的前身交swagger规范，通过定义一种用来描述api格式或者api定义的语言，来描述restful服务开发过程
目前最新的openapi规范是openapi 3.0，也就是swagger2.0规范

## 日志处理：如何设计日志包并记录日志？

日志级别：Debug，Info，Warning，Error，Panic，Fatal
如何选择日志级别 https://static001.geekbang.org/resource/image/75/35/75e8c71a791f279a68c35734f2451035.png

## 日志处理：如何设计日志包并记录日志？

开源日志包选择
标准库log包：标准log包不支持日志级别，日志分割，日志格式等功能，所以在大型项目中很少使用
glog：glog实现了日志包的基本功能，非常适合一些对日志功能要求不多的小型项目
logrus：logrus功能强大，不仅实现了日志包的基本功能，还有很多高级特性，适合些大型项目，尤其是需要机构化日志记录的项目
zap：zap提供了很强大的日志功能，性能好，内存分配次数少，适合日志要求很高的项目

## 应用构建三剑客：Pflag，Viper，Cobra

一个应用框架包含哪些部分
1. 命令行参数解析：主要用来解析命令行参数，这些命令行参数可以影响命令的运行效果
2. 配置文件解析：一个大型应用，通常具有很多参数，为了便于管理和配置，通常会将这些参数放到一个配置文件中，供程序读取并解析
3. 应用的命令行框架：应用最终是通过命令来启动的。
    命令需要具备help功能；命令需要能够解析命令行参数和配置文件；命令需要能够初始化业务代码，最终启动业务进程

命令行参数可以通过Pflag来解析 https://github.com/spf13/pflag
配置文件可以通过Viper来解析 https://github.com/spf13/viper
应用的命令行框架则可以通过Cobra来实现 https://github.com/spf13/cobra

Pflag包介绍
Flag结构体 github.com/spf13/pflag/flag.go#Flag
    一个命令行参数会在Pflag包中解析为一个Flag类型的变量
FlagSet结构体 github.com/spf13/pflag/flag.go#FlagSet
    FlagSet是一些预先定义好的Flag的集合，几乎所有的Pflag操作，都需要借助FlagSet提供的方法来完成

pflag的使用                代码c22_pflag
1. 支持多种命令行参数定义方式
    函数名带Var说明是将标志的值绑定到变量，否则是将标志的值存储在指针中
    函数名带P说明支持短选项，否则不支持短选项
2. 获取参数的值
3. 获取非选项参数
4. 指定了选项但是没有指定选项值时的默认值
5. 弃用标志或者标志的简写
    弃用名为xxx的标志，并告诉用户应该使用哪个标志代替
6. 保留名为port的标志，但是弃用它的简写形式
7. 隐藏标志
    如果只在内部使用，则可以将xxx标记为隐藏的，这意味着它将正常运行，但不会出现在help文本中

使用viper读入配置
1. 设置默认值
    一个好的配置系统应该支持默认值。viper支持对key设置默认值，当没有通过配置文件，环境变量，远程配置或命令行标志设置key时，默认值通常是很有用的
2. 读取配置文件
    viper可以读取配置文件来解析配置，支持json，yaml，properties的配置文件
    viper支持搜索多个路径，并且默认不配置任何搜索路径，将决策留给应用程序。viper会根据添加的路径顺序搜索配置文件，如果找到则停止搜索
    代码演示 - 使用viper搜索和读取配置文件的示例
3. 监听和重新读取配置文件 - 不推荐使用
4. 设置配置值
    viper.Set("user.username", "colin")
5. 使用环境变量
7. 使用标志

使用viper读取配置
1. 访问嵌套的键           代码c22_viper/v2
2. 反序列化               代码c22_viper/v3
3. 序列化为字符串          代码c22_viper/v3

Cobra介绍
Cobra既是一个可以创建强大的现代CLI应用程序的库，也是一个可以生成应用和命令文件的程序。
Cobra建立在Commands，arguments和flags结构之上。command代表命令，arguments代表非选项参数，flags代表选项参数。
格式：AAPNAME VERB NOUN --ADJECTIVE 或者 APPNAME COMMAND ARG --FLAG, verb代表动词，noun代表名词，adjective代表形容词

## 应用构建实战：如何构建一个优秀的企业应用框架

go后端服务，可以分为API服务和非API服务
API服务：通过对外提供HTTP/RPC接口来完成指定的功能，比如订单服务，通过调用创建订单的API接口，来创建商品订单。
非API服务：通过监听，定时运行等方式，而不是通过API调用来完成某些服务，比如消息处理服务，监听消息队列，收到消息后进行处理。