## iam系统概述：我们需要实现什么样的go项目？

iam系统架构图 https://static001.geekbang.org/resource/image/0a/42/0a5f6fd67af1eda1c690c8216dc5e042.jpg
iam5个核心组件和3个数据库 https://static001.geekbang.org/resource/image/6c/71/6cdbde36255c7fb2d4f2e718c9077a71.jpeg
    5个核心组件 iam-apiserver，iam-authz-server，iam-pump，marmotedu-sdk-go和iamctl
    3个数据库 redis，mysql，mongodb

authentication 缩写 authn
authorization 缩写 authz

## 环境准备：如何安装和配置一个基本的go开发环境？

192.168.1.50软件环境
mysql port:3306 账号:iam/iam59!z$ root/root
redis port:6379 password:kxkj0803
mongodb port:27017 账号:iam/iam59!z$ root/iam59!z$


## 规范设计：项目开发杂乱无章，如何规范？

6中开源协议 https://github.com/marmotedu/geekbang-go/blob/master/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D.md
开源协议选择 https://static001.geekbang.org/resource/image/61/00/61b4d5da6c8327b738e9657c6c144000.png

uber go代码规范 https://github.com/xxjwxc/uber_go_guide_cn

项目中重要的3类文档：README文档，项目文档，API接口文档
好的文档有两个有点：易读和可以快速定位文档

语义化版本规范

工具
go-gitlint 检查历史提交的commit message是否符合angular规范
git-chglog 根据commit message生成changelog

## 目录结构设计：如何组织一个可维护、可扩展的代码目录？

社区推荐的结构化目录结构 https://github.com/golang-standards/project-layout

## 研发流程：如何设计Go项目的开发流程？

一个项目从立项到结项，中间会经历很多阶段。业界相对标准的划分，是吧研发流程分为六个阶段
分别是：需求阶段、设计阶段、开发阶段、测试阶段、发布阶段、运营阶段。
六个阶段具体的流程 https://static001.geekbang.org/resource/image/ab/3b/ab6ac57696c0e90cf82624f78a82333b.png
六个阶段的核心工作 https://static001.geekbang.org/resource/image/dd/0f/ddb314275ba1bab28413221bc56ac80f.png

需求阶段的产出物是一个通过评审的详细的需求文档
设计阶段的产出物是一系列的文档
开发阶段的产出物是满足需求的源代码，开发文档，以及编译后的归档文件。
测试阶段的产出物是满足产品需求，达到发布条件的源代码，以及编译后的归档文件。
发布阶段的产出物是正式上线的软件

在项目开发中，要思考怎么尽可能自动生成代码
怎么提高开发和构建的效率？将开发阶段的步骤通过makefile实现集中管理，将构建阶段的步骤通过CI/CD平台实现自动化
一个大特性测试完，请测试同学吃个饭，联络感情，下次合作更顺畅。

项目中角色分工 https://static001.geekbang.org/resource/image/40/d5/40a1e20b153bb3ba1005cea4aefe62d5.png

## 研发模式，如何管理应用的生命周期？

如何选择研发模式和DevOps两类技术？
研发模式建议选择敏捷模式，因为它更能胜任互联网时代快速迭代的诉求。
DevOps优选确保落地CI/CD，接着尝试落地ChatOps技术，如果有条件可以积极探索AIOps和GitOps

敏捷模式中最具代表性的开发模式是Scrum开发模式。

CI/CD包含了三个核心概念
CI：持续集成，频繁地将开发者的代码合并到主干上。
CD：持续交付，使软件在较短的循环中可靠发布的软件方法
CD：持续部署，在持续交付的基础上，将经过充分测试的代码自动部署到生产环境上，整个流程不再需要相关人员的审核。
持续集成的核心点在代码，持续交付的核心点在可交付的产物，持续部署的核心点在自动部署。

DevOps的四个手段：AIOps，ChatOps，GitOps，NoOps。

## 设计方法：怎么写出优雅的Go项目？

go项目是一个偏工程化的概念，不仅包含了go应用，还包含了项目管理和项目文档
一个高质量的go应用，可以归纳为5个方面：代码结构，代码规范，代码质量，编程哲学，和软件设计方法。

代码结构：可以通过两个手段来组织代码结构
第一个手段是，组织一个好的目录结构。
第二个手段是，选择一个好的模块拆分方法，建议使用的是按功能拆分的方法

代码规范
uber go编码规范 https://github.com/xxjwxc/uber_go_guide_cn
静态代码检查工具 golangci-lint https://github.com/golangci/golangci-lint

代码质量的提高可以通过单元测试和code review

常用的mock工具
golang/mock：实现了基于interface的Mock功能，能够与golang内置的testing包做很好地集成，提供了mockgen工具来实现interface对应的mock源文件。
sqlmock：用来模拟数据库连接。数据库是项目中比较常见的依赖，在遇到数据库依赖时都可以用它。
httpmock：用来mock http请求。
buck/monkey：猴子补丁，能够通过替换函数指针的方式来修改任意函数的实现，如果上述mock不能满足我们的需求，可以尝试通过猴子补丁的方式来mock依赖。

go项目工具 https://static001.geekbang.org/resource/image/90/80/90ca527c2863fe642f9ab3d5b90fe980.png