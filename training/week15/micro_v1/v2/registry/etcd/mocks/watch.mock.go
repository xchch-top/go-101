// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Administrator\go\pkg\mod\go.etcd.io\etcd\client\v3@v3.5.4\watch.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	etcdserverpb "go.etcd.io/etcd/api/v3/etcdserverpb"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWatcher)(nil).Close))
}

// RequestProgress mocks base method.
func (m *MockWatcher) RequestProgress(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestProgress", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestProgress indicates an expected call of RequestProgress.
func (mr *MockWatcherMockRecorder) RequestProgress(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestProgress", reflect.TypeOf((*MockWatcher)(nil).RequestProgress), ctx)
}

// Watch mocks base method.
func (m *MockWatcher) Watch(ctx context.Context, key string, opts ...clientv3.OpOption) clientv3.WatchChan {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(clientv3.WatchChan)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockWatcherMockRecorder) Watch(ctx, key interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatcher)(nil).Watch), varargs...)
}

// MockwatchStreamRequest is a mock of watchStreamRequest interface.
type MockwatchStreamRequest struct {
	ctrl     *gomock.Controller
	recorder *MockwatchStreamRequestMockRecorder
}

// MockwatchStreamRequestMockRecorder is the mock recorder for MockwatchStreamRequest.
type MockwatchStreamRequestMockRecorder struct {
	mock *MockwatchStreamRequest
}

// NewMockwatchStreamRequest creates a new mock instance.
func NewMockwatchStreamRequest(ctrl *gomock.Controller) *MockwatchStreamRequest {
	mock := &MockwatchStreamRequest{ctrl: ctrl}
	mock.recorder = &MockwatchStreamRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockwatchStreamRequest) EXPECT() *MockwatchStreamRequestMockRecorder {
	return m.recorder
}

// toPB mocks base method.
func (m *MockwatchStreamRequest) toPB() *etcdserverpb.WatchRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toPB")
	ret0, _ := ret[0].(*etcdserverpb.WatchRequest)
	return ret0
}

// toPB indicates an expected call of toPB.
func (mr *MockwatchStreamRequestMockRecorder) toPB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toPB", reflect.TypeOf((*MockwatchStreamRequest)(nil).toPB))
}
