# Web框架

# Web框架概览

Web框架包含的组件 http://mc.xchch.top:6670/download/halo-blog/2209/Web框架包含的组件.png
常见的web框架有 gin, echo, beego, iris

面试题
web框架的功能: 处理Http请求, 为用户提供便捷API, 为用户提供无侵入式的插件机制, 提供如上传下载等默认功能
http包和web框架的区别: web框架提供高级路由功能, 封装http上下文以提供简单API, 封装Server以提供生命周期控制, 设计插件机制以提供无侵入式解决方案
Web框架的核心: 路由树, 上下文context, Server

## Web核心

对比常见的Web框架, 我们注意到对于一个Web框架来说, 至少要提供三个抽象
①代表服务器的抽象 Server ②代表上下文的抽象 Context ③路由树

Server从特性上来说, 至少要提供部分功能
①生命周期控制: 即启动, 关闭. 如果在后期, 我们还要考虑增加生命周期回调特性
②路由注册接口: 提供路由注册功能
③作为http包到web框架的桥梁

代码实现 web_v1     server定义
v0: 使用http.Handler
v1: 只组合http.Handler
v2: 组合http.Handler并且增加Start方法
v3: 将端口监听和服务器启动分离
v4: 注册路由api设计
代码实现 web_v2 支持静态路由查找
v0: 上一版本的最终代码
v1: 静态路由树构建
v2: 静态路由查找
v3: web服务集成静态路由功能
代码实现 web_v3 支持通配符匹配
v0: 上一版本的最终代码
v1: 通配符路由的注册和查找
代码实现 web_v4 支持参数路由
v0: 上一版本的最终代码
v1: 参数路由的注册和查找
v2: 取出路径参数路由的值

面试要点
Http服务器的生命周期: 一般来说就是启动, 运行和关闭. 在这三个阶段的前后都可以插入生命周期回调. 例如怎么做web服务的服务发现, 就是利用生命周期回调的启动后回调, 将web服务注册到服务中心
http server功能: 提供路由注册, 生命周期控制以及作为与http包结合的桥梁
路由树算法: 核心就是前缀树. 前缀的意思就是, 两个节点共同的前缀, 将会抽取出来作为父亲节点. 在我们的实现里面, 是按照 / 来切割, 每一段作为一个节点
路由匹配的优先级: 本质上这是和web框架相关的. 在我们的设计里面是 静态匹配 > 参数路径 > 通配符匹配
路由查找会回溯吗? 这也是和web框架相关的. 我们在课程上是不支持的
web框架是怎么组织路由树的: 一个http方法一颗路由树, 也可以考虑一颗路由树, 每个节点标记自己支持的http方法. 前者比较主流
路由查找的性能受什么影响: 怎么评估路由查找的性能. 核心是看路由树的高度, 次要因素是路由树的宽度
路由树是线程安全的吗? 严格来说也是跟web框架有关. 大多数都不是线程安全的, 这也是为了性能. 所以才要求大家一定要先注册路由, 后启动web服务器

## web Context

代码实现 web_v5 处理输出
v0: 上一版本的最终代码
v1: 获取param的值, 解析body, 响应json返回

context设计要点
context是线程安全的吗? context不需要保证线程安全, 因为在我们的预期里面, 这个Context只会被用户再一个方法里面使用, 而且不应该被多个goroutine操作
contest为什么不设计为接口? Echo设计为接口, 但是只有一个实现, 足以说明设计为接口有点过度设计的感觉
context能不能使用泛型? 不能, go泛型有一个限制, 结构体本身可以是泛型的, 但是它不能声明泛型方法

面试要点
能不能重复读取http协议的body内容? 原型api是不可以的. 但是我们可以通过封装来允许重复读取, 核心步骤是我们将Body读取出来之后放到一个地方, 后续都从这个地方读取
能不能膝盖http协议的响应? 原生api也是不可以的 但是可以用我们RespData这种机制, 在最后把数据刷新到网络中, 在刷新之前都可以修改
Form和PostForm的区别? 正常情况下, 你的api有限使用Form就不太可能出错
web框架如何支持路径参数的? web框架在发现匹配上了某个路径参数之后, 将这段路径记录下来作为路径参数的值, 这个值默认是string类型,  用户自己有需要就可以转化为不同的类型

## AOP方案

AOP(Aspect Oriented Programming), 面向切面编程. 核心在于将横向关注点从业务中剥离出来
横向关注点: 就是那些跟业务没有啥关系, 但是每个业务必须处理的. 常见的有几类:
    可观测性: logging, metric 和 tracing
    安全相关: 登录, 鉴权与权限控制
    错误处理: 例如错误页面支持
    可用性保证: 限流 熔断 降级

代码实现 web_v6 Middleware中间件
v0: 上一版本的最终代码
v1: 定义middleware
v2: 记录请求的输入和响应
v3: 链路追踪和监控
v4: 错误页面, 从panic中恢复

tracing工具 SkyWalking Zipkin Jaeger

prometheus metrics类型:
Counter: 计数器, 统计次数, 比如说某件事发生了多少次
Gauge: 度量, 它可以增加也可以减少, 比如说当前正在处理的请求数
Histogram: 柱状图, 对观察对象进行采样, 然后分到一个桶里面
Summary: 采样按照百分位进行统计, 比如99线, 999线等

思考
Middleware要不要考虑顺序问题: http://mc.xchch.top:6670/download/halo-blog/2209/Middleware顺序.png
    理论上, 每一个Middleware都应该不依赖其他的Middleware
    但这是一个美好的愿望, 比如在我们已经实现的几个Middleware里面, panic显然应该在最外层, 也就是紧跟着flashResp之前, 可观测性之后,
    又比如, 从业务上来看, 鉴权应该在很靠前的位置, 限流可以在鉴权前面, 也可以在鉴权之后, 取决于业务

面试要点
全链路追踪的概念?
99线, 999线? 就是响应的比例, 99%的响应, 99.9的响应的响应时间在多少以内

## 页面渲染&文件处理&session

上传下载这种功能, 可以考虑使用OSS, 不要真的自建服务器, OSS比我们手写代码稳定, 安全
静态资源和下载不一样, 静态资源下载需要告诉浏览器具体的content-type, 不然浏览器不知道怎么处理文件
当下不建议使用静态资源服务器, 可以考虑使用 OSS+CDN

代码实现 web_v7 页面渲染
v0: 上一版本的最终代码
v1: 实现页面渲染

代码实现 web_v8 文件上传
v0: 上一版本的最终代码
v1: 实现文件上传
v2: 调试accesslog中间件
v3: 实现文件下载
v4: 静态资源处理

header含义
Content-Disposition: 在指定为attachment的时候, 就是保存到本地, 同时我们还设置了filename
Content-Type: 这里用的是octet-stream, 代表的就是通用的二进制文件, 如果我们知道确切类型, 就可以换别的, 例如video, PDE之类的
Content-Transfer-Encoding: 这里设置为binary, 相当于直接传输

安全问题
http://localhost:8081/download?myfile=../../../../note/Web%E6%A1%86%E6%9E%B6.txt 可以下载到规定目录外的文件(Web框架.txt)

session 和 flash