# 微服务架构

## 概览

微服务架构的复杂源于网络间通信
微服务框架就是要解决这种架构下, 组件之间的发现, 通信, 容错等问题

微服务拆分方式: 按照组织架构拆分; 按照DDD的限界上下文拆分
微服务合适的粒度: 三四个人能清楚服务的细节, 即两个熟悉项目的人带两个新手

微服务框架主要问题 http://mc.xchch.top:6670/download/tech/2211/微服务框架主要问题.png
通信: 服务之间如何发起调用, 一般就是rpc, 或者是HTTP直接通信
服务治理: 涵盖从服务注册与发现到可观测性的全部内容

在底层通信协议上, 遇事不决用gRPC, 如果是小型系统, 可以考虑直接使用HTTP接口
gRPC比较学院派, 它是典型的使用IDL来生成代码的RPC框架. 是多语言通信的首选
IDL(interface description/definition language): 接口描述语言/接口定义语言. 是指用一种中间语言来定义接口, 而后为其他的语言生成对应代码的设计方案
gRPC使用的IDL是protobuf
protobuf也定义了序列化格式, 所以我们也常说使用protobuf来作为序列化协议

kratos

面试要点
微服务框架是什么? 主要就是解决两个问题, 通信和服务治理
为什么使用微服务框架? 本质上是为了分而治之, 将业务拆分之后独立治理, 部署
RPC框架和RestFul框架有什么区别? 应该说, 两者基本没联系, 全市区别. 唯一的联系, 就是RPC框架可以利用RestFul来实现.
    RestFul是指符合REST风格的HTTP接口, 而RPC指的是通过远程调用, 本质上就是两回事
RPC框架和Web框架有什么区别? 基本没什么联系, 都是区别. 唯一的共同点可以通过对web框架封装来实现RPC通信

# RPC

代码演示 rpc_v1
v0: 反射篡改方法的调用
v1: 单元测试增加返回值的校验
v2: 代码中实现response部分
v3: 单元测试代码重构
v4: 单元测试增加异常场景的用例
v5: 增加e2e测试代码