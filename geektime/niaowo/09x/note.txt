信号量的实现
初始化信号量: 设定初始的资源的数量
P操作: 将信号量的计数值减去1, 如果新值已经为负, 那么调用者会被阻塞并加入到等待队列中. 否则, 调用者会继续执行, 并且获得一个资源
V操作: 将信号量的计数值加1, 如果先前的计数值为负, 就说明有等待的P操作的调用者. 它会从等待队列中取出一个等待的调用者, 唤醒它, 让它继续执行.

go扩展包中的信号量 golang.org/x/sync/semaphore

代码演示
c16_v1: semaphore的使用

SingleFlight的作用是: 在处理多个goroutine同时调用同一个函数的时候, 只让一个goroutine去调用这个函数, 等到这个goroutine返回结果的时候
    再把结果返回给这几个同时调用的goroutine, 这样可以减少并发调用的数量
sync.Once主要是用在单次初始化场景中, 而SingleFlight主要用在合并并发请求的场景中, 尤其是缓存场景

SingleFlight使用互斥锁Mutex和Map来实现, Mutex提供并发时的读写保护, Map用来保存同一个key的正在处理(in flight)的请求
SingleFlight的数据结构是Group, 有三个方法
Do: 这个方法执行一个函数, 并返回函数执行的结果. 你需要提供一个key, 对于同一个key, 在同一时间只有一个在执行, 同一个key并发的请求会等待
    第一个执行的请求返回的结果, 就是它的返回结果. 函数fn是一个无参的函数, 返回一个结果或者error, 而Do方法会返回函数执行的结果或者是error,
    share会只是v是否返回给多个请求
DoChan: 类似Do方法, 返回是一个chan, 等fn函数执行完, 产生了结果以后, 就能从这个chan中接收结果
Forget: 告诉Group忘记这个key, 这样一来, 之后这个key请求会执行f, 而不是等待前一个未完成的fn函数的结果

代码演示
c17_v1: singleflight的使用
c17_v2: cyclicbarrier的使用 一氧化二氢制造工厂

CyclicBarrier允许一组goroutine彼此等待, 到达一个共同的执行点. 同时, 因为它可以被重复使用, 所以叫循环栅栏.
具体机制是大家都在栅栏前等待, 等全部都到齐了, 就抬起栅栏放行.