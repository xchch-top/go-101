Once可以用来执行且仅仅执行一次动作, 常常用于单例对象的初始化场景

sync.Once只暴露了一个方法Do, 你可以多次调用Do方法, 但是只有第一次调用Do方法时f参数才会执行, 这里f是一个无参数无返回值的函数
当且仅当第一次调用Do方法的时候参数f才会执行, 即使第二次, 第三次, 第n次调用时f参数值不一样, 也不会被执行

代码演示
c8_v1 当且仅当第一次调用Do方法的时候参数f才会执行
c8_v2 sqrt.go文件中three()方法, 将值和once封装成一个新的数据结构, 提供只初始化一次的值

Once的实现
一个正确的Once实现要使用一个互斥锁, 这样初始化的时候如果有并发的goroutine, 就会进入Slow方法
互斥锁的机制保证只有一个goroutine进行初始化, 同时利用双检查机制, 再次判断o.done是否为0, 如果为0则是第一次执行, 执行完毕后, 就将o.done设置为1, 然后释放锁
这样既保证了并发的goroutine会等待f完成, 而且还不会多次执行f

使用Once可能出现的2种错误
1. 死锁: Lock的递归调用导致的死锁
2. 未初始化: f方法执行失败

go中没有immutable类型, 导致我们声明的全局变量都是可变的, 别的地方或者第三方库可以随意更改这些变量
如果你真的担心这个package级别的变量被人修改, 你可以提供一个只读的GetXXX方法